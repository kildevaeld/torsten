// Code generated by go-bindata.
// sources:
// schemas/mysql.sql
// schemas/sqlite.sql
// DO NOT EDIT!

package sqlmeta

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemasMysqlSql = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\x4d\x8f\x9b\x30\x10\xbd\xf3\x2b\xe6\x06\x48\xad\x1a\x56\x4a\xa5\xaa\x27\x1a\x26\x15\x2a\x21\x29\x01\x69\xf7\x04\x2e\x78\x13\x4b\x81\x20\xe3\x54\x4d\xab\xfe\xf7\xda\x7c\x18\x36\x49\x37\x55\x73\x8a\xf0\x9b\x99\x37\xef\x3d\xdb\x58\x44\xe8\xc6\x08\xb1\xfb\x29\x40\xf0\x97\x10\xae\x63\xc0\x47\x7f\x1b\x6f\x21\x7b\x66\x07\x9a\x81\x65\x80\xfc\x65\x39\x2b\x32\xf8\xc6\x2a\xc2\xcf\x96\xf3\xde\x86\x4d\xe4\xaf\xdc\xe8\x09\xbe\xe0\x53\x5b\x14\x26\x41\xf0\xa6\x83\x56\xa4\x94\x75\xdf\x09\xcf\xf7\x84\x5b\x0f\xf3\xb9\x7d\x89\x28\x59\x49\x53\x71\xae\x27\xb0\xf9\x6c\x44\x81\x87\x4b\x37\x09\x62\x30\x49\x5d\x1f\x58\x4e\x04\x3b\x56\xef\x8e\xb9\xa0\xe2\x6d\x23\x38\x25\xa5\xd9\x37\x6a\xd8\x4f\xaa\x68\xed\x58\x25\x2e\x87\x9c\x14\x63\xf9\xdd\x72\x9c\x2b\x02\xbb\x5b\x67\x7a\xec\xac\x47\xd5\x94\x97\x4d\x8b\x1b\x19\x39\x1f\x66\x26\xf4\xe7\xb9\x60\x6a\xd3\x82\x48\x62\xf2\x9f\x06\x2d\x92\x28\xc2\x30\x4e\x63\x7f\x85\xdb\xd8\x5d\x6d\x86\xb5\x2f\xf0\xeb\x10\x92\x8d\xa7\xf4\xff\x6b\x05\x15\x64\xaa\x91\x14\xa9\xa0\xcf\xe4\x74\x10\x60\xfe\xfa\xad\x55\xd8\x13\x47\x9b\xf3\x20\x31\x03\x91\x71\x63\x3f\xf4\xf0\x11\x94\xa3\xa9\xb2\x27\x65\x55\x41\x7f\x80\xd5\x79\x65\x1b\xf6\x47\xc3\xb8\x9b\x85\xb4\x11\x44\x9c\x1a\x1d\x89\x9a\x88\xfd\xeb\x3e\x0f\x05\x1a\x73\xd3\xe4\x5c\x3a\x2a\x58\xb5\x33\xff\x4f\xd6\x24\xf4\xbf\x26\x38\xdd\xb0\x1b\x9b\x2a\x7e\x7a\xd1\x96\xac\xdd\x55\x4c\xb2\x3b\x1c\xfc\xa3\x02\xd5\xb1\x18\xaf\x44\x9f\x21\xba\xa3\xfc\xc5\x75\x20\x27\x71\x94\x73\xe5\x5a\x25\xad\x44\xbf\x14\x6b\xd2\x82\xf1\x0c\xe4\xa2\xe7\x36\x78\x13\x25\xb4\xa5\xb3\x41\x82\xfb\xd2\xd6\x84\xcb\xe6\xe9\x34\xc7\xd7\xae\x77\xa4\x2f\x6e\xee\x35\x6c\xb9\x8e\xd0\xff\x1c\xb6\xe4\x2d\x5d\x63\x43\x84\x4b\x94\x8a\x2f\x70\x78\x0c\xac\xf6\x19\xb0\x55\x70\x3d\x0c\x50\x05\xd7\xdd\x2e\x5c\x0f\x6f\xf5\x19\x19\x5e\x77\xea\x84\xb4\xb2\xd7\xba\xbd\xf0\x55\xe1\x6f\x19\xda\xf9\xf6\x27\x00\x00\xff\xff\x82\x7d\xc3\xdc\xc7\x04\x00\x00"

func schemasMysqlSqlBytes() ([]byte, error) {
	return bindataRead(
		_schemasMysqlSql,
		"schemas/mysql.sql",
	)
}

func schemasMysqlSql() (*asset, error) {
	bytes, err := schemasMysqlSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schemas/mysql.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemasSqliteSql = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x54\xdf\x6f\x9b\x30\x18\x7c\xcf\x5f\xf1\xbd\x61\xa4\x4e\x0b\x95\x32\x69\x9a\xf6\xc0\x12\xa7\x42\x23\xa4\x23\x20\xb5\x4f\xe0\x81\x43\xac\x81\x41\xe0\x6c\xcd\xa6\xfd\xef\xb3\xf9\x9d\x04\xb5\x9d\x9a\xa7\xe8\xe3\xbe\xe3\x7c\x77\xf8\xde\x35\xef\x36\x26\xec\xf3\x92\xb2\x84\x07\x3f\xe8\xa9\x82\xcf\xb0\x75\x3e\xcd\x66\x4b\x17\x9b\x1e\x06\xcf\xfc\x62\x63\xb0\xd6\xe0\x6c\x3d\xc0\x0f\xd6\xce\xdb\x41\xb8\x67\x29\x0d\x01\xcd\x40\xfe\xc2\x88\xc5\x21\x7c\x67\x9c\x94\x27\x64\x7c\xd0\xe1\xde\xb5\x36\xa6\xfb\x08\x5f\xf1\x63\xbd\xe4\xf8\xb6\x7d\xd3\x40\x39\xc9\xe4\xde\x4f\x52\x46\x07\x52\xa2\xdb\xc5\x42\xbf\x44\x64\x2c\xa3\x81\x38\x15\x23\xd8\x62\x3e\xa0\x60\x85\xd7\xa6\x6f\x7b\xa0\x91\xa2\x48\x59\x44\x04\xcb\xf9\xfb\x3c\x12\x54\xbc\xab\x44\x49\x49\xa6\xb5\x44\x15\xfb\x4d\x95\xac\x84\x71\x71\xf9\x92\xa3\x52\x2c\xe7\xc8\x30\xae\x04\x24\x53\xcf\xfa\xd7\xce\x5b\x54\x41\xcb\xac\xaa\x71\x83\x22\xe3\xe3\x5c\x83\xf6\x79\x24\x98\x3a\x69\x4c\xa4\x30\xf9\xaf\x07\xa1\x6e\x82\x34\x9e\xff\xd2\x6e\x40\x4b\xf3\x88\xa4\x6a\xa2\xe9\x7a\xe7\xc1\x9b\x96\xa9\x20\x21\x08\xfa\x24\x20\xa6\x7b\x72\x4c\x05\x68\x7f\xfe\xf6\xae\x1c\x88\xd1\x87\x75\x2b\x8d\xed\xb8\xd5\x29\x67\xfa\x10\xbb\xe5\xac\xf0\xc3\x45\xec\x2a\xf5\x40\x45\x18\x30\x1e\xd3\x27\x59\x93\x7a\x84\x9a\x58\xf5\x57\x74\x26\xa8\x04\x11\xc7\xaa\xaf\x4e\x41\xc4\xe1\xf9\x3e\x74\x0b\x3d\x66\xb2\x0c\x91\x4c\x5e\x30\x9e\x68\xe7\xf6\xcb\x69\xfa\x5f\xee\x8d\xaa\x8b\x1a\x71\xfa\xd8\x14\xdf\xb1\xbe\xf9\xcf\x78\xd3\x88\x0d\xd4\xe2\x60\xd1\xd9\xc1\x7b\xd6\x97\xad\xe2\x79\x3c\x7c\x63\x6d\x29\x69\x42\xcb\xb3\xef\xcb\xf4\xbd\xad\xe5\x48\xae\x0d\x76\xbc\xf6\xf0\xac\x0a\x62\x56\xca\x0e\x30\x7e\xaa\x8b\x3c\x72\xac\xaf\xc4\xbc\xb3\xea\xe5\x08\x0a\x52\x52\x2e\x82\xf1\x77\x31\x6e\x4d\x8b\xaa\x35\x5f\xdc\x04\xd7\xb0\xf5\xd6\xc5\xd6\x9d\x53\x6b\x47\xfd\x8e\x0e\x2e\x5e\x63\x17\x3b\x4b\xdc\x5d\x2e\xa8\xbe\x56\x74\x65\xe0\x0a\xdb\x58\x3a\xb5\x34\x77\x4b\x73\x85\xa7\x78\x06\x85\xd7\x4c\x8d\x8f\x28\x9c\x66\x7b\x65\xba\x8a\x63\x32\xd6\x96\xbc\x09\x55\x52\xfd\x0b\x00\x00\xff\xff\x6e\x38\x4a\x06\x50\x05\x00\x00"

func schemasSqliteSqlBytes() ([]byte, error) {
	return bindataRead(
		_schemasSqliteSql,
		"schemas/sqlite.sql",
	)
}

func schemasSqliteSql() (*asset, error) {
	bytes, err := schemasSqliteSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schemas/sqlite.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schemas/mysql.sql": schemasMysqlSql,
	"schemas/sqlite.sql": schemasSqliteSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schemas": &bintree{nil, map[string]*bintree{
		"mysql.sql": &bintree{schemasMysqlSql, map[string]*bintree{}},
		"sqlite.sql": &bintree{schemasSqliteSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

