// Code generated by go-bindata.
// sources:
// schemas/mysql.sql
// schemas/sqlite.sql
// DO NOT EDIT!

package sqlmeta

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemasMysqlSql = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\x4d\x8f\x9b\x30\x10\xbd\xf3\x2b\xe6\x06\x48\xad\x0a\xab\x66\xa5\x55\x4f\x34\x38\x15\x2a\x21\x29\x01\x69\xf7\x04\x2e\x78\x13\x4b\xe0\x20\x70\xaa\xa6\x55\xff\x7b\x6d\xbe\x03\x34\xad\x9a\x53\x84\xdf\xcc\xbc\x79\xef\xd9\xca\xda\x47\x56\x80\x20\xb0\x3e\xba\x08\x9c\x0d\x78\xbb\x00\xd0\xb3\x73\x08\x0e\x10\xbf\xd2\x8c\xc4\xa0\x29\x20\x7e\x71\x42\xd3\x18\xbe\x52\x86\xcb\xab\x66\x3e\xea\xb0\xf7\x9d\xad\xe5\xbf\xc0\x67\xf4\x52\x17\x79\xa1\xeb\xbe\x69\xa0\x0c\xe7\xa2\xee\x1b\x2e\x93\x13\x2e\xb5\x87\xd5\x4a\x9f\x22\x72\x9a\x93\x88\x5f\x8b\x11\x6c\x65\x0c\x28\xb0\xd1\xc6\x0a\xdd\x00\x54\x5c\x14\x19\x4d\x30\xa7\x67\xf6\xee\x9c\x70\xc2\xdf\x56\xbc\x24\x38\x57\xdb\x46\x15\xfd\x41\x24\xad\x23\x65\x7c\x3a\xe4\x22\x19\x8b\xef\x9a\x69\xce\x08\x1c\x97\xce\xfa\xb1\x46\x8b\x2a\x48\x99\x57\x35\x6e\x60\x64\x3e\x19\x2a\xb4\xe7\x09\xa7\x72\xd3\x14\x0b\x62\xe2\x5f\x0f\x5a\x87\xbe\x8f\xbc\x20\x0a\x9c\x2d\x3a\x04\xd6\x76\xdf\xad\x3d\xc1\xef\x3c\x08\xf7\xb6\xd4\xff\x8f\x15\x84\xe3\x41\x23\xd3\x30\x84\x4a\x29\x79\xc5\x97\x8c\x83\xfa\xf3\x57\x27\xc3\x89\xa6\x29\x61\x31\x54\x39\xce\xb2\x7a\xad\x25\x31\x0d\xb5\x15\xed\x84\xcd\xde\xcb\x07\xd1\xb1\x43\x0c\x02\x39\x9e\x8d\x9e\x41\x06\x20\x92\x6e\x46\x94\xa5\xe4\x3b\x68\x8d\xb5\xba\xa2\x7f\x50\x94\xbf\x46\x27\xaa\x38\xe6\x97\xaa\x4f\x50\x81\xf9\xe9\x7e\x2c\xba\x82\x1e\xb3\x98\x89\x44\x04\x80\x53\x76\x54\xff\xcf\x85\xd0\x73\xbe\x84\x68\xbc\x61\x33\x36\x92\xfc\xfa\x45\x6b\xb2\x7a\x53\x31\x8a\x7a\x77\xf0\x8f\x0a\xb0\x73\x3a\xdc\xa0\x36\x72\xe4\x48\xca\x9b\xdb\x83\x2f\xfc\x2c\xe6\x8a\xb5\x72\xc2\x78\xbb\x14\xad\xa2\x94\x96\x31\x88\x45\xaf\x53\x43\xfb\x00\x18\x9d\x04\xb7\xd2\xbe\x37\x9e\x1e\x67\xda\x16\xb8\x14\xdd\xa3\x71\xee\xe7\xb6\x37\xac\x27\x37\x7d\x0e\xdb\xec\x7c\xe4\x7c\xf2\x6a\xf6\x5a\x5f\xa3\x83\x8f\x36\x48\x48\xbe\x46\xdd\xe3\xa1\xd5\xcf\x86\x2e\x83\x6e\x23\x17\xc9\xa0\x5b\x87\xb5\x65\xa3\xa5\x3e\x03\xc3\x79\xa7\x46\x49\x2d\xbe\xd7\xed\xc6\x58\x89\x5f\x72\xb4\x31\xee\x77\x00\x00\x00\xff\xff\x99\x3e\xfc\x5c\xf7\x04\x00\x00"

func schemasMysqlSqlBytes() ([]byte, error) {
	return bindataRead(
		_schemasMysqlSql,
		"schemas/mysql.sql",
	)
}

func schemasMysqlSql() (*asset, error) {
	bytes, err := schemasMysqlSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schemas/mysql.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemasSqliteSql = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x94\x5f\x6f\x9b\x30\x14\xc5\xdf\xf9\x14\xf7\x0d\x53\x75\x0a\xa9\x94\xbd\x4c\x7b\x60\x89\x53\xa1\x51\xd2\x11\x22\xb5\x4f\xd8\x03\x27\xb1\x06\x06\x81\xb3\x35\x9b\xf6\xdd\x67\x27\xe1\x4f\x68\x94\x66\x8a\xa6\xf1\x84\xec\xe3\x23\xdf\x7b\x7e\xbe\x8f\x81\x73\xff\xe0\xc0\x32\x2f\x19\x5f\x89\xe8\x1b\xdb\x56\xf0\x11\x66\xfe\x07\xc3\x18\x07\xd8\x09\x31\x84\xce\x27\x0f\x83\x3b\x05\x7f\x16\x02\x7e\x72\xe7\xe1\x1c\xc8\x92\xa7\x2c\x12\x79\xc2\x08\x20\x03\xd4\x47\x78\x42\xe0\x2b\x17\xb4\xdc\xa2\xe1\x7b\x0b\x1e\x03\xf7\xc1\x09\x9e\xe1\x33\x7e\xbe\xdd\x0b\x0a\x2a\xd7\x04\xbe\xd3\x32\x5e\xd3\x12\xdd\x8d\x46\xd6\xce\xd1\x5f\x78\xde\x41\xb1\xe9\x79\xf4\xb6\x57\xe7\xb7\x0b\x56\x66\x15\x01\x2e\x24\x4c\xf0\xd4\x59\x78\x21\x98\x23\xdb\x36\x0f\xdb\xb1\xe4\x99\xba\x6d\x42\x25\xd3\x7f\x8d\x06\xd5\x2b\xc8\x14\xf9\x0f\xf3\x16\xcc\x34\x8f\x69\xaa\x57\x4c\xcb\x3a\x1c\xce\xae\x39\x5c\xd0\x92\x09\x19\xf5\x6e\x5f\x5b\x74\x2a\x58\xf3\x24\x61\x82\x40\x95\xd1\x34\x55\x75\xa0\x61\x2b\xb3\xf7\x9a\xe9\x2c\xc0\xee\xbd\xaf\xdb\x0a\xa8\xe3\x6c\x41\x80\xa7\x38\xc0\xfe\x18\x1f\xa5\x83\xc8\x6e\x73\xe6\x2b\x23\x0f\xab\x34\xc7\xce\x7c\xec\x4c\xb0\x61\xb5\x01\x2f\x7c\xf7\xcb\x42\x25\xec\x4f\xf0\x53\x2f\x67\xed\x11\xe9\xe0\x22\x2e\x12\xf6\xa2\x7d\x8e\xcc\x77\x99\x5a\x97\xb0\xc2\xc5\x32\xbf\x80\x95\x7e\xa8\x82\xea\xbe\x9f\x83\x26\x53\xbd\x8e\xe4\xb6\xe8\xc8\x46\x76\xab\x6a\x59\xa0\x45\x91\xf2\x98\x4a\x9e\x8b\x41\x1e\xab\xd8\xde\x55\xb2\x64\x34\xab\x01\xa9\xf8\x4f\xa6\xaf\xb5\xd2\x04\xbd\x3a\x6e\xff\x53\x46\xe1\xbf\x43\x9a\x31\x49\x09\x48\xf6\x22\x21\x61\x4b\xba\x49\x25\x98\xbf\x7e\x37\xbd\x59\xd3\x61\x53\xd7\x9d\x7d\x31\xbd\xaf\x53\x68\xde\xe3\x0e\xad\xb3\xdd\x3a\x66\xbd\xd6\x5f\x43\xfa\x29\xc4\x1b\x3a\x23\xcd\x5a\xcb\x79\xb3\x8e\xf6\x10\x6a\x9b\xc1\xcd\x9b\x9c\x57\x92\xca\x4d\xd5\x90\xfe\xf6\xd0\xab\x0f\x34\x9a\x93\xf0\xc6\x8a\x54\xc9\xc5\xaa\x37\xcd\xd4\x6a\xfa\x57\x39\x77\x9e\x5a\xfd\x7a\x2f\x1c\x05\x9d\xea\x4e\x4e\x84\x43\x1d\xed\x4c\xb8\x19\x18\xea\xfb\x13\x00\x00\xff\xff\x08\x90\xa9\x29\x60\x06\x00\x00"

func schemasSqliteSqlBytes() ([]byte, error) {
	return bindataRead(
		_schemasSqliteSql,
		"schemas/sqlite.sql",
	)
}

func schemasSqliteSql() (*asset, error) {
	bytes, err := schemasSqliteSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schemas/sqlite.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schemas/mysql.sql": schemasMysqlSql,
	"schemas/sqlite.sql": schemasSqliteSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schemas": &bintree{nil, map[string]*bintree{
		"mysql.sql": &bintree{schemasMysqlSql, map[string]*bintree{}},
		"sqlite.sql": &bintree{schemasSqliteSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

