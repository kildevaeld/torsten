// Code generated by go-bindata.
// sources:
// schemas/sqlite.sql
// DO NOT EDIT!

package sqlmeta

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemasSqliteSql = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\x41\x8f\x9b\x30\x10\x85\xef\xf9\x15\xa3\xbd\x40\x56\xa9\x92\xac\x94\x43\xd5\x13\xdd\x38\x15\x2a\x4b\x5a\x02\xd2\xee\x29\x38\x66\x36\x71\x05\x06\x19\xb3\x6a\xfa\xeb\x6b\x03\x01\xb2\xa1\x7b\x28\x27\x0b\x3f\xbf\x99\xf9\xe6\x4d\x26\x8f\x01\x71\x42\x02\xa1\xf3\xd5\x23\xe0\x6e\xc0\xdf\x86\x40\x9e\xdd\x5d\xb8\x83\xf8\x95\xa7\x18\x83\x3d\x01\xfd\xc5\x3c\x89\x81\x0b\x85\x47\x94\xf0\x23\x70\x9f\x9c\xe0\x05\xbe\x93\x17\x70\xa2\x70\xeb\xfa\xda\xe6\x89\xf8\xe1\xac\xd1\x32\x23\x3e\x70\x41\xe5\xd9\x5e\x3e\x4c\x41\xe4\x0a\x44\x95\xa6\xed\xb5\xa0\x99\xf6\x7d\xa3\x92\x9d\xa8\xb4\x1f\x56\xab\x69\x5d\xd6\x8f\x3c\xaf\x55\x64\x3c\xc3\xbd\x3a\x17\x03\xd9\x6a\xd1\xab\x60\x4d\x36\x4e\xe4\x85\x60\xd1\xa2\x48\x39\xa3\x8a\xe7\x62\x9e\x33\x85\xea\x53\xa9\x24\xd2\xcc\x6a\x8d\x4a\xfe\x07\x4d\x2b\x47\xdd\xfa\xfb\x22\x09\x55\x34\x86\x0c\x13\x5e\x65\x87\x34\x3f\x74\xae\x03\x4d\xd5\x8e\x6d\x2f\x97\x37\x4d\x1e\xc7\xee\x3a\x93\x45\xab\x2a\x50\x66\x65\xad\xeb\xbb\x5e\x7e\x5e\x58\x70\x61\xa5\xb8\xa1\xa1\x9b\x41\x73\xba\x21\xf1\xe1\xf5\xfc\x3e\x2e\x15\x55\x95\x2e\x80\xa2\xca\x6c\x8b\xe9\xe1\x15\x17\x47\x6b\xa6\xd9\x68\xeb\x37\x34\x27\xbd\x89\xe6\x3c\xe8\x33\xc1\x57\x5a\xa5\x0a\xee\x2e\x4f\xee\x66\xf7\xf3\x16\x5a\x6b\xd9\x6d\x68\x14\x7d\x5f\xaa\x7d\x75\xa2\xcb\x6e\xeb\xe6\xc9\x35\xce\xe9\x97\x2e\x6c\xae\xbf\x26\xcf\xef\xc2\x26\xb1\xcc\x2b\xc9\x70\x6f\xc2\xb1\xe7\x22\xc1\xdf\xb0\xf5\xbb\xdf\x76\x13\x9a\x81\xc9\x68\x62\x45\x9e\xfc\x5f\x62\x13\x2e\x63\xd0\xd3\x9c\xeb\x7d\x8e\x60\xb2\x16\x97\x39\x0b\xaa\x4e\x1f\xa7\xb7\xa0\x12\x85\xda\x0f\xe3\x31\x12\xad\x42\xe6\xbf\x90\xd5\xb2\x7f\x04\xac\x63\x32\x90\xdc\x1a\x6d\xb6\x01\x71\xbf\xf9\xf5\x68\xf6\xd5\x9b\x29\x04\x64\x43\x02\xe2\x3f\x92\xdd\x80\x64\x7d\xa3\xd9\xae\x89\x47\x34\x48\x46\x4b\x46\x13\x1c\x33\xeb\x07\xb9\xb2\x32\x94\x6f\x6c\x76\xa4\x69\x6a\xb8\xe8\xc8\x77\x7f\x46\xe3\xfb\x36\x1e\xfd\x9a\x1b\xc7\x9a\xec\xec\x8a\x8c\x31\xfb\x1b\x00\x00\xff\xff\x2a\x01\x87\x10\xa5\x04\x00\x00"

func schemasSqliteSqlBytes() ([]byte, error) {
	return bindataRead(
		_schemasSqliteSql,
		"schemas/sqlite.sql",
	)
}

func schemasSqliteSql() (*asset, error) {
	bytes, err := schemasSqliteSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schemas/sqlite.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schemas/sqlite.sql": schemasSqliteSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schemas": &bintree{nil, map[string]*bintree{
		"sqlite.sql": &bintree{schemasSqliteSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

